syntax = "proto3";
package peggy.v1;

import "peggy/v1/msgs.proto";
import "peggy/v1/attestation.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/MinterTeam/mhub/chain/x/peggy/types";

// BridgeValidator represents a validator's ETH address and its power
message BridgeValidator {
  uint64 power            = 1;
  string ethereum_address = 2;
}

// Valset is the Ethereum Bridge Multsig Set, each peggy validator also
// maintains an ETH key to sign messages, these are used to check signatures on
// ETH because of the significant gas savings
message Valset {
  uint64                   nonce   = 1;
  repeated BridgeValidator members = 2;
  uint64                   height  = 3;
}

message ValsetHistory {
  repeated ValsetHistoryItem valsets = 1;
}

message ValsetHistoryItem {
  Valset valset = 1;
  repeated MsgValsetConfirm confirms = 2;
}

message AttestationHistory {
  repeated Attestation attestations = 1;
  repeated AttestationSigners signers = 2;
}

message AttestationSigners {
  repeated string vals = 1;
  repeated bool signed = 2;
}

// It's difficult to serialize and deserialize
// interfaces, instead we can make this struct
// that stores all the data the interface requires
// and use it to store and then re-create a interface
// object with all the same properties.
message GenericClaim {
  uint64  event_nonce   = 1;
  int32   claim_type    = 2;
  bytes   hash          = 3;
  string  event_claimer = 4;
}

message ColdStorageTransferProposal {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  repeated cosmos.base.v1beta1.Coin amount = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}
